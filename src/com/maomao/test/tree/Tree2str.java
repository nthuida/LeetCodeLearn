package com.maomao.test.tree;

/**
 * 根据二叉树创建字符串
 * 你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。
 * 空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。
 *
 * 示例 1:
 *
 * 输入: 二叉树: [1,2,3,4]
 *        1
 *      /   \
 *     2     3
 *    /
 *   4
 *
 * 输出: "1(2(4))(3)"
 *
 * 解释: 原本将是“1(2(4)())(3())”，
 * 在你省略所有不必要的空括号对之后，
 * 它将是“1(2(4))(3)”。
 *
 * 示例 2:
 *
 * 输入: 二叉树: [1,2,3,null,4]
 *        1
 *      /   \
 *     2     3
 *      \
 *       4
 *
 * 输出: "1(2()(4))(3)"
 *
 * 解释: 和第一个示例相似，
 * 除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。
 *
 * @author huida
 * @date 2020/6/24
 */
public class Tree2str {

    /**
     * 一共要考虑四种情况，1.左子树和右子树都没有 2.只有左子树，右子树为空 3.左子树为空，只有右子树 4.左右子树都有
     * @param t
     * @return
     */
    public String tree2str(TreeNode t) {
        if (t == null) {
            return "";
        }
        if (t.left ==  null && t.right == null) {
            return t.val+"";
        }
        if (t.right == null) {
            return t.val+"("+tree2str(t.left)+")";
        }
        //左子树为空，也需要()
        return t.val+"("+tree2str(t.left)+")("+tree2str(t.right)+")";
    }
}
